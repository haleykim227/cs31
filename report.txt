11/06/18
Haley Kim
405111152

a) 
- The subsequence function and how to fix it so that the the function would still keep looking for a2 within a1 after a portion but not the full a2 was found within a1.
- The divide function and making sure the function did not skip an element after checking an element in the innermost if-loop.
- Making sure various test scenarios were included, and the functions were not relying on undefined behavior.

b)
    string h[7] = { "greg", "gavin", "ed", "xavier", "", "eleni", "fiona" };
    assert(lookup(h, 7, "eleni") == 5);
    assert(lookup(h, 7, "ed") == 2);
    assert(lookup(h, 2, "ed") == -1);
    assert(positionOfMax(h, 7) == 3);
    
    string g[4] = { "greg", "gavin", "fiona", "kevin" };
    assert(countRuns(g, 2) == 2);
    assert(differ(h, 4, g, 4) == 2);
    assert(appendToAll(g, 4, "?") == 4 && g[0] == "greg?" && g[3] == "kevin?");
    assert(rotateLeft(g, 4, 1) == 1 && g[1] == "fiona?" && g[3] == "gavin?");
    
    string e[4] = { "ed", "xavier", "", "eleni" };
    assert(subsequence(h, 7, e, 4) == 2);
    assert(appendToAll(e, -1, "!") == -1 && e[0] == "ed" && e[2] == "");
    assert(appendToAll(e, 4, "?") == 4 && e[0] == "ed?" && e[3] == "eleni?");
    
    string d[5] = { "gavin", "gavin", "gavin", "xavier", "xavier" };
    assert(countRuns(d, 5) == 2);
    assert(lookup(d, 5, "gavin") == 0);
    assert(lookup(d, 5, "xavier") == 3);
    assert(lookup(d, 2, "heather") == -1);
    assert(positionOfMax(d, 5) == 3);
    
    string f[3] = { "fiona", "ed", "john" };
    assert(lookupAny(h, 7, f, 3) == 2);
    assert(positionOfMax(f, 3) == 2);
    assert(flip(f, 3) == 3 && f[0] == "john" && f[2] == "fiona");
    assert(divide(h, 7, "fiona") == 3);
    
    string z[0] = {};
    assert(positionOfMax(z, 0) == -1);
    
    string q[4] = { "john", "max", "mark", "ethan"};
    string j[4] = { "john", "max", "mark", "ethan"};
    assert(differ(q, 4, j, 4) == 4);
    assert(rotateLeft(j, 4, 0) == 0 && j[1] == "mark" && j[3] == "john");
    assert(flip(q, 4) == 4 && q[0] == "ethan" && q[3] == "john");
    
    string o[3] = {"dan", "mark", "john"};
    assert(appendToAll(o, 0, "?") == 0 && o[0] == "dan" && o[2] == "john");
    assert(rotateLeft(o, 0, 0) == -1);
    assert(rotateLeft(o, 3, 3) == -1);
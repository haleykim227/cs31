Haley Kim
405111152

a)
- Figuring out how to move elements in the other two arrays when an invalid value is found in one array
- Making sure the program does not try to access an invalid position of a string
- Turning document array into a 2D-array split up by words
- Comparing words when separation was greater than 0
- Coming up with various test cases

b)
declare constants

function makeProper
	treat negative nPatterns as 0
	repeatedly: if element before last element in separation is negative
		override negative integer with elements behind it
		override element in that same position in the two word arrays with elements behind it
		decrement nPatterns 
		or if last element in separation is negative
			decrement nPatters
	repeatedly: for word1 array
		if a character is not a letter
			override that row (word) with the following ones
			override element in that same position for word2 array and separation with elements behind it
			decrement nPatterns
	repeatedly: do the same for word2 array
	repeatedly: check for empty strings in word1
		if element before last element is empty
			override with latter elements
			override element in that same position for word2 array and separation
			decrement nPatterns
		if last element in word 1 is empty
			decrement nPatterns
	repeatedly: do the same for word2 array
	repeatedly: check for same patterns
		if two patterns have the same words				override the one with the smaller separation
				decrement nPatterns
			if it's the last element, just decrement nPatterns
	repeatedly: 
		check through every character and turn it into lowercase
	return nPatterns;

function rate
	make a copy array that is empty
	copy everything from const char document into copy array
	override any character that is not a letter with characters behind it
	reduce multiple spaces to one space by overriding the second contiguous space
	repeatedly: turn every character into lowercase
	create an empty 2d-array
	repeatedly: copy each character from copy array into each row of 2d-array until a space is found
		when there is a space, go to the next row
		start copying each character of the next word separated by space
	repeatedly: check through each word of word1 array to see if it matches a word in 2d-array
		if separation is 0, check elements adjacent to that word in 2d-array
			if pattern is found, increment rating
		if separation is not 0, check elements up until separation+1 away from first word found in 2d-array
			if second word is found, increment rating
	return rating

c)
    const int TEST1_NRULES = 4;
    char test1w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "mad",       "deranged", "nefarious", "have"
    };
    char test1w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      "mad"
    };
    int test1dist[TEST1_NRULES] = {
        1,           3,          0,           12
    };
    assert(makeProper(test1w1,test1w2,test1dist,TEST1_NRULES) == 4); // nonnegative separations and valid words
    char test2w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "mad",       "derange.d", "nefarious", "have"
    };
    char test2w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      "mad"
    };
    int test2dist[TEST1_NRULES] = {
        1,           3,          -2,           12
    };
    assert(makeProper(test2w1,test2w2,test2dist,TEST1_NRULES) == 2); // words with non-letter characters should be removed
    char test3w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "mad",       "derange.d", "nefarious", "HAve"
    };
    char test3w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      "mad"
    };
    int test3dist[TEST1_NRULES] = {
        1,           3,          -2,           12
    };
    assert((makeProper(test3w1,test3w2,test3dist,TEST1_NRULES) == 2)); // words with non-letter characters should be removed, uppercase should be fine
    char test4w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "",       "deranged", "nefarious", "HAve"
    };
    char test4w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      "mad"
    };
    int test4dist[TEST1_NRULES] = {
        1,           3,          2,           12
    };
    assert(makeProper(test4w1,test4w2,test4dist,TEST1_NRULES) == 3); // empty string should not be valid, empty string in the beginning should not result in undefined behavior
    char test5w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "mad",       "deranged", "nefarious", "HAve"
    };
    char test5w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      ""
    };
    int test5dist[TEST1_NRULES] = {
        1,           3,          2,           12
    };
    assert(makeProper(test5w1,test5w2,test5dist,TEST1_NRULES) == 3); // empty string should not be valid, empty string in the end should not result in undefined behavior
    assert(rate("The mad UCLA scientist unleashed a deranged evil giant robot.", // should fine both patterns
                test1w1, test1w2, test1dist, TEST1_NRULES) == 2);
    assert(rate("The mad UCLA scientist unleashed    a deranged robot.", // should fine both patterns, extra spaces should be okay
                test1w1, test1w2, test1dist, TEST1_NRULES) == 2);
    assert(rate("**** 2018 ****", // should not be recognized, there are no valid words in string
                test1w1, test1w2, test1dist, TEST1_NRULES) == 0); 
    assert(rate("  That plot: NEFARIOUS!", // should not be recognized, "plot:" is not valid
                test1w1, test1w2, test1dist, TEST1_NRULES) == 1);
    assert(rate("deranged deranged robot deranged robot robot", // should not recount robot deranged pattern
                test1w1, test1w2, test1dist, TEST1_NRULES) == 1);
    assert(rate("That scientist said two mad scientists suffer from deranged-robot fever.", // should not be recognized due to wrong separation
                test1w1, test1w2, test1dist, TEST1_NRULES) == 0);
    assert(rate("Stupi!!d fri,cking mad    UCLA SCIENtiST scrEwed u::p    eVerything.", // random capitalization and punctuation should be fine
                test1w1, test1w2, test1dist, TEST1_NRULES) == 1);
    assert(rate("mad scientist scientist mad mad scientist mad", // should not recount mad scientist pattern
                test1w1, test1w2, test1dist, TEST1_NRULES) == 1);
    const int TEST7_NRULES = -1;
    char test7w1[3][MAX_WORD_LENGTH+1] = {};
    char test7w2[3][MAX_WORD_LENGTH+1] = {};
    int test7dist[3] = {};
    assert(rate("The mad UCLA scientist unleashed a deranged evil giant robot.", // to see how it handles a negative nPatterns, should treat it as 0
                test7w1, test7w2, test7dist, TEST7_NRULES) == 0);
    char test8w1[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "mad",       "deranged", "nefarious", "HAve"
    };
    char test8w2[TEST1_NRULES][MAX_WORD_LENGTH+1] = {
        "scientist", "robot",    "plot",      "mad"
    };
    int test8dist[TEST1_NRULES] = {
        1,           3,          2,           12
    };
    assert(rate("The mad UCLA scientist unleashed a asdlkfjashdfkasjdfhaoshdfkjasdhfkjsahdfklhslkhakldshflkashflkdshfkl deranged evil giant robot.", // to see how it handles a word that is longer than 20 characters in the document
                test8w1, test8w2, test8dist, TEST1_NRULES) == 2);
    cout << "All tests succeeded" << endl;